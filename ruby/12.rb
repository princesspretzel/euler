# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?

require 'prime'

def triangle_number
  num = 10000
  sum = 0
  divisor_count = 0
  until divisor_count > 500
    sum_array = []
    sum = (1..num).reduce(:+)
    array = sum.prime_division
    array.each do |x|
      sum_array << x[1]+1
    end
    num += 1
    divisor_count = sum_array.reduce(:*)
    puts divisor_count
  end
  puts sum
end

triangle_number

# 76576500



# def try_angle_number
#   num = 10000
#   divisor_count = 0
#   until divisor_count > 500
#     divisor_count = 0
#     sum = (1..num).reduce(:+)
#     divisor = 1
#     if sum.even? # assume the answer must be even because close-together even numbers have more divisors
#       array = []
#       (1..(Math.sqrt(sum)).each do |x|
#         array = x.prime_division
#         if array.length > 500
#           prime_divisor = sum % x
#             divisor = x
#           end
#         end
#       end
#     end
#     num += 1
#     puts num
#   end
#   puts sum
# end
